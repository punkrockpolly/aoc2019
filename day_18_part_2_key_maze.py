from collections import deque


DAY_18_INPUT = """#################################################################################
#.#.........#........s..#...#...........#.#z..#.........#...#................e..#
#.#.#######.#.###.#####.#.#.#########.#.#.#.#.#.#.#######.#.#.###########.#####.#
#...#.....#.#...#.#...#.#.#.....#.....#.#.#.#.#.#.........#....f#.......#.#.....#
#.#######.#.#.###.#.###.#.#####.#.#####.#.#.#.#.#########.#######.#####.###.###C#
#.#.......#.#.#...#...#...#...#.#...#.#.#...#.R...#.....#.#...#...#.........#...#
#.#.#######.#.#.###.#.#####.#.#.###.#.#.#.#####.###.###.#.#.#.#.#.###########.###
#.#.#.....#...#.#...#.....#.#.#...#.#...#.#...#.#...#...#...#.#.#.#.......#...#.#
#.#.#.###.#.###.#.#####.#.###.###.#.#######.#.###.###.#########.###.#####.#.###.#
#...#.#...#.#...#.#...#.#.....#...#.....#...#...#.#.#u........#j..#.#.#...#.....#
#.###.#.#####.###.###.#.###.###.###.###.#.#####.#.#.#########.#.#P#.#.#.#######.#
#.#...#...#...#.......#.#...#...#.....#.#...#...#x#.....#.....#.#.....#...Y.#...#
#.#.#####.#.###.#######.#.###.#########.###.#.###.#####.#.#####.###########.#.###
#.#...#.....#...#.....#.#.#.#.#.........#...#.#.....#...#..g..#.#.#.........#...#
#####.#######.###.###.#.#.#.#.###.#####.#.###.#####.#.#######.#.#.#.###########.#
#...#.#...#.#.#.#...#...#...#...#.#...#.#...#.....#.#.....#...#...#.Q.....#.....#
#.#.#.#.#.#.#.#.###.#######.###.#.###.#.#.#.#####.#.#.###.#.#########.###.#.#####
#.#.W.#.#.#.#...#...#...#.#.#.#.#...#...#.#.#.......#...#m..........#...#.#.#...#
#.#####.#.#.###.#.###.#.#.#.#.#.###.#.###.#.#######################.###.#.#.###.#
#.#.....#.#.....#.#...#.#.....#.#...#...#.#.#.......#...#.......#...#...#.#.#...#
#.#.#####.#.#####.#.###.#.#####.#.#####.#.#.#.#####.#.#.#.#####.###.#####.#.#.###
#k#.#...#.#...V.#...#.#.#...#...#.#...#.#.#...#...#...#...#...#...#.......#.#...#
#.#.#.###.#####.#####.#.#####.###.#.#.#.#.#####.#.#########.#####.#########.###.#
#.....#.N.#...#...#...#.....#.....#.#...#.#.....#.#...#.....#.....#.....#.......#
#######.#.#.#.###.#.#######.#######.#####.###.###.#.#.#.#####.#.###.###.#.#######
#.......#.#.#.#.#.#...#...#.........#...#.....#...#.#...#.....#.......#.#...#...#
#.###.#####.#.#.#.###.#.#.#######.#####.#######.###.#################.#.#####.#D#
#.#.#.#.....#.#.#...#...#.......#.B...#.#.....#...#.#...............#.#..v..#.#.#
#.#.#.#.#####.#.###.###########.#####.#.###.#.###.#.#####.#########.#.#####.#.#.#
#.#...#.#...#.#.....#.......#...#...#.#.#...#.#...#.#...#.#...#.#...#.....#...#.#
#.#.###.###.#.###.#####.#.###.###.###.#.#.###.#.###.#.#.#.#.#.#.#.#############.#
#.#...#.#...#...#.#...#.#.#...#...#...#.#.#...#.#...#.#...#.#...#.#.......#...#.#
#.#####.#.#####.#.#.#.#.###.###.#.#.###.#.#####.#.###.#####.#####.#.#####.#.#.#.#
#.......#.....#.#...#.#.#...#...#.#...#.#.......#.#.....#.......#...#...#...#.#.#
#.#########.###.#####.#.#.###.###.###.#.#.#######.###.#.#.#####.#####.#.#####.#.#
#...........#...#...#...#...#.#.....#...#.......#...#.#.#.....#...#...#...#...#.#
###########.#.###.#.#.#####.#.#.#######.###########.###.#####.###.#.#.#####.###.#
#...#...#...#.#...#.#.#.....#.#.#.....#.#...........#...#...#...#...#.#...#.#.I.#
#.###.#.#.###.#.###.###.#####.###.#.###.#.###########.###.#####.#####.#.#.#.#.#.#
#.....#.....#.....#.....#.........#....@#@............#.............#...#.....#.#
#################################################################################
#...#d..#.....#.....#.......#.....#.#..@#@............#.............A.#.........#
#.#.###.#.#.###L###.#.#.###.#.###.#.#.#.#.###########.#.#.#############.###.###.#
#.#...#...#...#.#t#.#.#...#a..#...#...#.#.#...#.....#.#.#.....#....l#.....#...#.#
#.###.###.###.#.#.#.#.###.#####.#######.#.#.#.#####.#.#.#####.#.###.#.#######.#.#
#.#.#o..#.#..i#...#...#.#.#.........#...#...#.......#...#...#.#.#.#...#.#.T.#.#.#
#.#.###.#.#.#####.#####.#.#########.#.#.###########.#######.#.#.#.#####.#.#.#.#.#
#.#...#.#.#.....#...#...#.#...#.......#.#...#.......#.......#...#.......#.#...#.#
#.#H###.#######.###.###.#.#.#.#########.###.#.#######.###.#########.###.#.#####.#
#.#.....#.....#.........#...#.....#b....#...#.....#.#.#.#.........#.#...#.....#.#
#.###.###.###.###################.###.###.#######.#.#.#.#######.#.#.#########.###
#...#.....#.#...#...#...........#...#...#...#.....#.#...#.....#.#...#.......#...#
#.#.#######.###.#.#.#.#########.###.#######.#.#####.###.#.#.###.#.###.#####.#.#.#
#.#.#...#...#...#.#...#.......#...#.....#...#...#.....#...#.#...#.#...#...#.#.#.#
#.#.#.#.#.#.#.###.#####.#########.###.#.#.#####.#.#.#######.#.###.#.###.#.#.###.#
#.#.#.#...#.......#.................#.#.#.......#.#.........#...#.#.#.#.#.#...#.#
#.#.#.#########.#########.#########.###.#.#########.###########.#.#.#.#.#.###.#.#
#.#.#.#.......#.#...#...#.#.......#...#.#.#.......#.#...#.......#.#.#.#.#.....#.#
###.#.#.#####.#.#.#.#.#.#.#E#####.###.#.#.#.###.#.#.#.#.#.#########.#.#.#######.#
#...#.#.#...#.#.#.#...#.#.#.#.....#...#.#.#.#...#.#...#.#...#.......#.#.#.....#.#
#.###.#.#.###.#.#.#####.###.#.#####.###.#.#.#.###.#####.###.#.#######.#.###.#.#.#
#.#...#.#...#.#.#.#...#...#.#...#.......#.#.#.#.#.#...#.#...#.#.......#.....#...#
#.###.#.#.#.#.#.#Z#.#####.#.###.#######.#.###.#.#.#.#.#.#.#####.###.#############
#...#.#.#.#.#.#.#...#.#r..#...#...#...#.#.#...#.#.#.#...#.........#.....#.......#
#.#.###.###.#.#.#####.#.#####.###.#.#.#.#.#.###.#.#.###############.###.#.#####.#
#.#.#...#...#.#.#.#...#.F.#...#...#.#.#.#.#...#.#.#.#...#.........#...#.#.#...#.#
#.#.#.###.#.#.#.#.#.#.###.#.###.###.#.###.###.#.#.###.#.#.#######.###.#.#.#.###.#
#.#.#...#.#.#.#...#.#...#...#.#cJ...#...#.....#.#.....#...#.#...#.#...#.#.#...#.#
#.#.###.#.#.#.#####.###.#####.#########.#######.###########.#.#.#.#####.#.###.#.#
#.#...#.#.#.#.......#.#...#.....#..p..#.#.....#...#.....#.....#.#.....#.#...#.#.#
#####.#.#.###########.#.###.#.###.#.###.#.###.#.#.#.###.#.#####.#####.#.###.#K#.#
#.....#.#...#.......U.#.....#.#...#.....#.#.#...#...#.#...#...#.#.S...#.......#.#
#.#.###.###.#.###.###.#######.#.#########.#.#########.#####.#.#.#.#######.#####.#
#.#.#...#...#.#.#.#.#.....#y..#...#.....#...#.........#.....#...#.......#.#...#w#
#.###.###.###.#.#.#.#####.#.#####.#.#.#####.#.###.#####.#####.#########.#.#.#.#.#
#...#...#.....#.#.#.......#.......#.#...#.#.#...#.#.....#.....#.......#.#n#.#.#.#
#.#.###.#.#####.#.#####.###############.#.#.###.#.#.###########.###.###.###.#.#.#
#.#...#.#.......#.....#.#.............M.#.#.#...#.#...#.........#...#..h#...#.O.#
#.#.###.#############.#G###.###########.#.#.#.###.###.#.#########.###.###.#####.#
#.#...............X...#.....#......q....#.....#.....#...........#.........#.....#
#################################################################################"""  # noqa

TEST_INPUTS = [("""#######
#a.#Cd#
##@#@##
#######
##@#@##
#cB#.b#
#######""", 8),
               ("""###############
#d.ABC.#.....a#
######@#@######
###############
######@#@######
#b.....#.....c#
###############""", 24),
               ("""#############
#DcBa.#.GhKl#
#.###@#@#I###
#e#d#####j#k#
###C#@#@###J#
#fEbA.#.FgHi#
#############""", 32)]

# fails for this test case, but works for puzzle input
#               ("""#############
# g#f.D#..h#l#
# F###e#E###.#
# dCba@#@BcIJ#
# ############
# nK.L@#@G...#
# M###N#H###.#
# o#m..#i#jk.#
# ############""", 72)


def find_quadrant(x, y, mid_height, mid_width):
    if x <= mid_width and y <= mid_height:
        return 1
    elif x >= mid_width and y <= mid_height:
        return 2
    elif x < mid_width and y > mid_height:
        return 3
    elif x >= mid_width and y > mid_height:
        return 4


def parse_input(puzzle_input):
    maze = puzzle_input.splitlines()
    maze_map = {}
    keys_and_doors = {}
    start = {1: {}, 2: {}, 3: {}, 4: {}}

    for y, line in enumerate(maze):
        mid_height = len(maze) // 2
        for x, char in enumerate(line):
            mid_width = len(line) // 2
            quadrant = find_quadrant(x, y, mid_height, mid_width)
            if char == '#':
                maze_map[(x, y)] = 'WALL'
            elif char == '.':
                maze_map[(x, y)] = 'PATH'
            elif char == '@':
                start[quadrant] = (x, y)
                maze_map[(x, y)] = 'PATH'
            else:
                maze_map[(x, y)] = char
                keys_and_doors[(x, y)] = char

    return start, maze_map, keys_and_doors


def find_quadrant_items(quadrant, start, maze_map, keys_and_doors):
    directions = {(0, 1), (0, -1), (-1, 0), (1, 0)}
    path = {(start, ''): []}
    quadrant_keys_and_doors = {}
    q = deque([(start, '')])
    while q:
        (x, y), prev_keys = q.popleft()
        for dir_xy in directions:
            keys = prev_keys
            new_xy = (x + dir_xy[0], y + dir_xy[1])
            tile = maze_map.get(new_xy)
            if new_xy in keys_and_doors:
                key_label = keys_and_doors[new_xy]
                quadrant_keys_and_doors[new_xy] = key_label
                tile = 'PATH'
                if key_label not in keys:
                    keys = ''.join(sorted(keys + key_label))
            if (new_xy, keys) in path:  # we've been here before
                continue
            path[(new_xy, keys)] = path[((x, y), prev_keys)] + [new_xy]
            if tile == 'PATH':
                q.append((new_xy, keys))

    return quadrant_keys_and_doors


def traverse_maze(puzzle_input):
    start, maze_map, keys_and_doors = parse_input(puzzle_input)
    num_keys = {}
    paths = {}
    quadrant_keys_and_doors = {1: {}, 2: {}, 3: {}, 4: {}}

    for quadrant in range(1, 5):
        items = find_quadrant_items(quadrant, start[quadrant], maze_map, keys_and_doors)
        quadrant_keys_and_doors[quadrant] = items

    for quadrant in range(1, 5):
        num_keys[quadrant] = sum([k.islower() for k in quadrant_keys_and_doors[quadrant].values()])
        q = deque([(start[quadrant], '')])
        paths[quadrant] = explore_quadrant(q,
                                           start[quadrant],
                                           maze_map,
                                           quadrant_keys_and_doors[quadrant],
                                           num_keys[quadrant])
    return sum(path for path in paths.values())


def explore_quadrant(q, start, maze_map, keys_and_doors, num_keys):
    directions = {(0, 1), (0, -1), (-1, 0), (1, 0)}
    path = {(start, ''): []}
    while q:
        (x, y), prev_keys = q.popleft()
        for dir_xy in directions:
            keys = prev_keys
            new_xy = (x + dir_xy[0], y + dir_xy[1])
            tile = maze_map.get(new_xy)
            if new_xy in keys_and_doors:
                key_label = keys_and_doors[new_xy]
                tile = 'PATH'
                if key_label not in keys:  # have we not seen this item before
                    if key_label.islower():  # found a key
                        keys = ''.join(sorted(keys + key_label))  # sort the keys to reduce duplicate paths
                        if len(keys) == num_keys:
                            return len(path[((x, y), prev_keys)] + [new_xy])
                    else:  # found a door
                        if key_label.lower() in keys_and_doors and (  # key in this quadrant
                                key_label.lower() not in keys):  # door is locked
                                continue
            if (new_xy, keys) in path:  # we've been here before
                continue
            path[(new_xy, keys)] = path[((x, y), prev_keys)] + [new_xy]
            if tile == 'PATH':
                q.append((new_xy, keys))


for (test_in, test_out) in TEST_INPUTS:
    print(test_in)
    output = traverse_maze(test_in)
    print("output: ", output)
    print("expected output: ", test_out)
    assert output == test_out

print(traverse_maze(DAY_18_INPUT))

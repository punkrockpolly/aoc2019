from collections import defaultdict, deque


DAY_18_INPUT = """#################################################################################
#.#.........#........s..#...#...........#.#z..#.........#...#................e..#
#.#.#######.#.###.#####.#.#.#########.#.#.#.#.#.#.#######.#.#.###########.#####.#
#...#.....#.#...#.#...#.#.#.....#.....#.#.#.#.#.#.........#....f#.......#.#.....#
#.#######.#.#.###.#.###.#.#####.#.#####.#.#.#.#.#########.#######.#####.###.###C#
#.#.......#.#.#...#...#...#...#.#...#.#.#...#.R...#.....#.#...#...#.........#...#
#.#.#######.#.#.###.#.#####.#.#.###.#.#.#.#####.###.###.#.#.#.#.#.###########.###
#.#.#.....#...#.#...#.....#.#.#...#.#...#.#...#.#...#...#...#.#.#.#.......#...#.#
#.#.#.###.#.###.#.#####.#.###.###.#.#######.#.###.###.#########.###.#####.#.###.#
#...#.#...#.#...#.#...#.#.....#...#.....#...#...#.#.#u........#j..#.#.#...#.....#
#.###.#.#####.###.###.#.###.###.###.###.#.#####.#.#.#########.#.#P#.#.#.#######.#
#.#...#...#...#.......#.#...#...#.....#.#...#...#x#.....#.....#.#.....#...Y.#...#
#.#.#####.#.###.#######.#.###.#########.###.#.###.#####.#.#####.###########.#.###
#.#...#.....#...#.....#.#.#.#.#.........#...#.#.....#...#..g..#.#.#.........#...#
#####.#######.###.###.#.#.#.#.###.#####.#.###.#####.#.#######.#.#.#.###########.#
#...#.#...#.#.#.#...#...#...#...#.#...#.#...#.....#.#.....#...#...#.Q.....#.....#
#.#.#.#.#.#.#.#.###.#######.###.#.###.#.#.#.#####.#.#.###.#.#########.###.#.#####
#.#.W.#.#.#.#...#...#...#.#.#.#.#...#...#.#.#.......#...#m..........#...#.#.#...#
#.#####.#.#.###.#.###.#.#.#.#.#.###.#.###.#.#######################.###.#.#.###.#
#.#.....#.#.....#.#...#.#.....#.#...#...#.#.#.......#...#.......#...#...#.#.#...#
#.#.#####.#.#####.#.###.#.#####.#.#####.#.#.#.#####.#.#.#.#####.###.#####.#.#.###
#k#.#...#.#...V.#...#.#.#...#...#.#...#.#.#...#...#...#...#...#...#.......#.#...#
#.#.#.###.#####.#####.#.#####.###.#.#.#.#.#####.#.#########.#####.#########.###.#
#.....#.N.#...#...#...#.....#.....#.#...#.#.....#.#...#.....#.....#.....#.......#
#######.#.#.#.###.#.#######.#######.#####.###.###.#.#.#.#####.#.###.###.#.#######
#.......#.#.#.#.#.#...#...#.........#...#.....#...#.#...#.....#.......#.#...#...#
#.###.#####.#.#.#.###.#.#.#######.#####.#######.###.#################.#.#####.#D#
#.#.#.#.....#.#.#...#...#.......#.B...#.#.....#...#.#...............#.#..v..#.#.#
#.#.#.#.#####.#.###.###########.#####.#.###.#.###.#.#####.#########.#.#####.#.#.#
#.#...#.#...#.#.....#.......#...#...#.#.#...#.#...#.#...#.#...#.#...#.....#...#.#
#.#.###.###.#.###.#####.#.###.###.###.#.#.###.#.###.#.#.#.#.#.#.#.#############.#
#.#...#.#...#...#.#...#.#.#...#...#...#.#.#...#.#...#.#...#.#...#.#.......#...#.#
#.#####.#.#####.#.#.#.#.###.###.#.#.###.#.#####.#.###.#####.#####.#.#####.#.#.#.#
#.......#.....#.#...#.#.#...#...#.#...#.#.......#.#.....#.......#...#...#...#.#.#
#.#########.###.#####.#.#.###.###.###.#.#.#######.###.#.#.#####.#####.#.#####.#.#
#...........#...#...#...#...#.#.....#...#.......#...#.#.#.....#...#...#...#...#.#
###########.#.###.#.#.#####.#.#.#######.###########.###.#####.###.#.#.#####.###.#
#...#...#...#.#...#.#.#.....#.#.#.....#.#...........#...#...#...#...#.#...#.#.I.#
#.###.#.#.###.#.###.###.#####.###.#.###.#.###########.###.#####.#####.#.#.#.#.#.#
#.....#.....#.....#.....#.........#...................#.............#...#.....#.#
#######################################.@.#######################################
#...#d..#.....#.....#.......#.....#.#.................#.............A.#.........#
#.#.###.#.#.###L###.#.#.###.#.###.#.#.#.#.###########.#.#.#############.###.###.#
#.#...#...#...#.#t#.#.#...#a..#...#...#.#.#...#.....#.#.#.....#....l#.....#...#.#
#.###.###.###.#.#.#.#.###.#####.#######.#.#.#.#####.#.#.#####.#.###.#.#######.#.#
#.#.#o..#.#..i#...#...#.#.#.........#...#...#.......#...#...#.#.#.#...#.#.T.#.#.#
#.#.###.#.#.#####.#####.#.#########.#.#.###########.#######.#.#.#.#####.#.#.#.#.#
#.#...#.#.#.....#...#...#.#...#.......#.#...#.......#.......#...#.......#.#...#.#
#.#H###.#######.###.###.#.#.#.#########.###.#.#######.###.#########.###.#.#####.#
#.#.....#.....#.........#...#.....#b....#...#.....#.#.#.#.........#.#...#.....#.#
#.###.###.###.###################.###.###.#######.#.#.#.#######.#.#.#########.###
#...#.....#.#...#...#...........#...#...#...#.....#.#...#.....#.#...#.......#...#
#.#.#######.###.#.#.#.#########.###.#######.#.#####.###.#.#.###.#.###.#####.#.#.#
#.#.#...#...#...#.#...#.......#...#.....#...#...#.....#...#.#...#.#...#...#.#.#.#
#.#.#.#.#.#.#.###.#####.#########.###.#.#.#####.#.#.#######.#.###.#.###.#.#.###.#
#.#.#.#...#.......#.................#.#.#.......#.#.........#...#.#.#.#.#.#...#.#
#.#.#.#########.#########.#########.###.#.#########.###########.#.#.#.#.#.###.#.#
#.#.#.#.......#.#...#...#.#.......#...#.#.#.......#.#...#.......#.#.#.#.#.....#.#
###.#.#.#####.#.#.#.#.#.#.#E#####.###.#.#.#.###.#.#.#.#.#.#########.#.#.#######.#
#...#.#.#...#.#.#.#...#.#.#.#.....#...#.#.#.#...#.#...#.#...#.......#.#.#.....#.#
#.###.#.#.###.#.#.#####.###.#.#####.###.#.#.#.###.#####.###.#.#######.#.###.#.#.#
#.#...#.#...#.#.#.#...#...#.#...#.......#.#.#.#.#.#...#.#...#.#.......#.....#...#
#.###.#.#.#.#.#.#Z#.#####.#.###.#######.#.###.#.#.#.#.#.#.#####.###.#############
#...#.#.#.#.#.#.#...#.#r..#...#...#...#.#.#...#.#.#.#...#.........#.....#.......#
#.#.###.###.#.#.#####.#.#####.###.#.#.#.#.#.###.#.#.###############.###.#.#####.#
#.#.#...#...#.#.#.#...#.F.#...#...#.#.#.#.#...#.#.#.#...#.........#...#.#.#...#.#
#.#.#.###.#.#.#.#.#.#.###.#.###.###.#.###.###.#.#.###.#.#.#######.###.#.#.#.###.#
#.#.#...#.#.#.#...#.#...#...#.#cJ...#...#.....#.#.....#...#.#...#.#...#.#.#...#.#
#.#.###.#.#.#.#####.###.#####.#########.#######.###########.#.#.#.#####.#.###.#.#
#.#...#.#.#.#.......#.#...#.....#..p..#.#.....#...#.....#.....#.#.....#.#...#.#.#
#####.#.#.###########.#.###.#.###.#.###.#.###.#.#.#.###.#.#####.#####.#.###.#K#.#
#.....#.#...#.......U.#.....#.#...#.....#.#.#...#...#.#...#...#.#.S...#.......#.#
#.#.###.###.#.###.###.#######.#.#########.#.#########.#####.#.#.#.#######.#####.#
#.#.#...#...#.#.#.#.#.....#y..#...#.....#...#.........#.....#...#.......#.#...#w#
#.###.###.###.#.#.#.#####.#.#####.#.#.#####.#.###.#####.#####.#########.#.#.#.#.#
#...#...#.....#.#.#.......#.......#.#...#.#.#...#.#.....#.....#.......#.#n#.#.#.#
#.#.###.#.#####.#.#####.###############.#.#.###.#.#.###########.###.###.###.#.#.#
#.#...#.#.......#.....#.#.............M.#.#.#...#.#...#.........#...#..h#...#.O.#
#.#.###.#############.#G###.###########.#.#.#.###.###.#.#########.###.###.#####.#
#.#...............X...#.....#......q....#.....#.....#...........#.........#.....#
#################################################################################
"""  # noqa

TEST_INPUTS = [("""########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################""", 132),
               ("""#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################""", 136),
               ("""########################
#@..............ac.GI.b#
###d#e#f################
###A#B#C################
###g#h#i################
########################""", 81)]


def parse_input(puzzle_input):
    maze = puzzle_input.splitlines()
    maze_map = {}
    doors = {}
    keys = {}

    for y, line in enumerate(maze):
        for x, char in enumerate(line):
            if char == '#':
                maze_map[(x, y)] = 'WALL'
            elif char == '.':
                maze_map[(x, y)] = 'PATH'
            elif char == '@':
                start = (x, y)
                maze_map[(x, y)] = 'PATH'
            else:
                maze_map[(x, y)] = char
                if char.islower():
                    keys[char] = (x, y)
                else:
                    doors[char] = (x, y)

    return start, maze_map, keys, doors


def traverse_maze(puzzle_input, test=False):
    start, maze_map, keys, doors = parse_input(puzzle_input)
    directions = {1: (0, 1), 2: (0, -1), 3: (-1, 0), 4: (1, 0)}
    path = {start: []}
    q = deque()

    while q:
        x, y = q.popleft()
        for direction, dir_xy in directions.items():
            new_xy = (x + dir_xy[0], y + dir_xy[1])
            if new_xy in path:
                continue
            if new_xy in portals:
                portal_label = portals[new_xy]
                if portal_label == 'ZZ':
                    return len(path[(x, y)]) - 1
                portals_xy = portal_map[portal_label]
                for portal in portals_xy:
                    if portal != new_xy:
                        q.append(portal)
                        path[portal] = path[(x, y)]
                continue
            tile = donut_map.get(new_xy)
            path[new_xy] = path[(x, y)] + [new_xy]
            if tile == 'PATH':
                q.append(new_xy)


for (test_in, test_out) in TEST_INPUTS:
    print(test_in)
    output = traverse_maze(test_in)
    print("output: ", output)
    print("expected output: ", test_out)
    assert output == test_out

print(traverse_maze(DAY_18_INPUT))

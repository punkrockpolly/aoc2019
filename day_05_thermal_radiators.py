DAY_5_INPUT = [3,225,1,225,6,6,1100,1,238,225,104,0,1102,17,65,225,102,21,95,224,1001,224,-1869,224,4,224,1002,223,8,223,101,7,224,224,1,224,223,223,101,43,14,224,1001,224,-108,224,4,224,102,8,223,223,101,2,224,224,1,223,224,223,1101,57,94,225,1101,57,67,225,1,217,66,224,101,-141,224,224,4,224,102,8,223,223,1001,224,1,224,1,224,223,223,1102,64,34,225,1101,89,59,225,1102,58,94,225,1002,125,27,224,101,-2106,224,224,4,224,102,8,223,223,1001,224,5,224,1,224,223,223,1102,78,65,225,1001,91,63,224,101,-127,224,224,4,224,102,8,223,223,1001,224,3,224,1,223,224,223,1102,7,19,224,1001,224,-133,224,4,224,102,8,223,223,101,6,224,224,1,224,223,223,2,61,100,224,101,-5358,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,19,55,224,101,-74,224,224,4,224,102,8,223,223,1001,224,1,224,1,224,223,223,1101,74,68,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,107,677,677,224,102,2,223,223,1006,224,329,1001,223,1,223,1008,226,677,224,102,2,223,223,1006,224,344,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,359,1001,223,1,223,8,226,226,224,102,2,223,223,1006,224,374,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,389,101,1,223,223,8,677,226,224,1002,223,2,223,1005,224,404,101,1,223,223,1108,677,226,224,102,2,223,223,1006,224,419,1001,223,1,223,1108,226,677,224,102,2,223,223,1006,224,434,101,1,223,223,1108,677,677,224,1002,223,2,223,1005,224,449,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,464,101,1,223,223,7,677,226,224,1002,223,2,223,1006,224,479,101,1,223,223,108,677,677,224,1002,223,2,223,1005,224,494,101,1,223,223,107,226,677,224,1002,223,2,223,1006,224,509,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,524,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,539,101,1,223,223,1008,226,226,224,102,2,223,223,1006,224,554,1001,223,1,223,8,226,677,224,1002,223,2,223,1006,224,569,101,1,223,223,1007,677,677,224,102,2,223,223,1005,224,584,1001,223,1,223,1107,677,226,224,1002,223,2,223,1006,224,599,101,1,223,223,7,226,226,224,1002,223,2,223,1005,224,614,101,1,223,223,108,677,226,224,1002,223,2,223,1005,224,629,1001,223,1,223,108,226,226,224,1002,223,2,223,1005,224,644,101,1,223,223,1007,677,226,224,1002,223,2,223,1006,224,659,101,1,223,223,1107,226,226,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226]  # noqa

TEST_INPUTS = [
    ([3, 0, 4, 0, 99], [55, 0, 4, 0, 99], 55),
    ([1002, 4, 3, 4, 33], [1002, 4, 3, 4, 99], 9)
]


def interpret_opcode(opcode):
    opcode = '000' + str(opcode)
    instruction = int(opcode[-2:])
    mode_1 = int(opcode[-3:][0])
    mode_2 = int(opcode[-4:][0])
    mode_3 = None

    if instruction == 1 or instruction == 2:
        mode_3 = int(opcode[-5:][0])

    return (instruction, mode_1, mode_2, mode_3)


def intcode(puzzle_data, user_input):
    length = len(puzzle_data)
    n = 0

    while n < length:
        (opcode, mode_1, mode_2, mode_3) = interpret_opcode(puzzle_data[n])

        if opcode == 99:
            return puzzle_data

        if opcode == 1:
            input_one = puzzle_data[n + 1]
            input_two = puzzle_data[n + 2]
            input_three = puzzle_data[n + 3]
            param_1 = puzzle_data[input_one] if mode_1 == 0 else input_one
            param_2 = puzzle_data[input_two] if mode_2 == 0 else input_two

            if mode_3 == 0:
                puzzle_data[input_three] = param_1 + param_2
            elif mode_3 == 1:
                puzzle_data[n + 3] = param_1 + param_2
            else:
                print("ERROR 1")
            n += 4
        elif opcode == 2:
            input_one = puzzle_data[n + 1]
            input_two = puzzle_data[n + 2]
            input_three = puzzle_data[n + 3]
            param_1 = puzzle_data[input_one] if mode_1 == 0 else input_one
            param_2 = puzzle_data[input_two] if mode_2 == 0 else input_two

            if mode_3 == 0:
                puzzle_data[input_three] = param_1 * param_2
            elif mode_3 == 1:
                puzzle_data[n + 3] = param_1 * param_2
            else:
                print("ERROR 2")
            n += 4
        elif opcode == 3:
            if mode_1 == 0:
                input_one = puzzle_data[n + 1]
                puzzle_data[input_one] = user_input
            elif mode_1 == 1:
                puzzle_data[n + 1] = user_input
            else:
                print("ERROR 3")
            n += 2
        elif opcode == 4:
            if mode_1 == 0:
                input_one = puzzle_data[n + 1]
                print(puzzle_data[input_one])
            elif mode_1 == 1:
                print(puzzle_data[n + 1])
            else:
                print("ERROR 4")
            n += 2
        else:
            print("ERROR 5, opcode: ", opcode)

for (test_in, test_out, user_input) in TEST_INPUTS:
    # print(test_in)
    output = intcode(test_in, user_input)
    # print(output)
    assert output == test_out

intcode(DAY_5_INPUT, 1)
